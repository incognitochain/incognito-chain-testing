{
  "address": "0xCd2Ca09366a16b0Bc374874D7B9d45C54AcDa900",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract UniswapV2",
          "name": "_uniswapV2",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "ETH_CONTRACT_ADDRESS",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "srcToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "srcQty",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "destToken",
          "type": "address"
        }
      ],
      "name": "getAmountsOut",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "srcToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "srcQty",
          "type": "uint256"
        },
        {
          "internalType": "contract IERC20",
          "name": "destToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountOutMin",
          "type": "uint256"
        }
      ],
      "name": "trade",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "uniswapV2",
      "outputs": [
        {
          "internalType": "contract UniswapV2",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "wETH",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x6be7a71f958cad6cf33bcd08ccc73577550be56ef6ae6fdd672df0edafc474b8",
  "receipt": {
    "to": null,
    "from": "0xb5A581c6EA895fBfD0d7529ac04e24Bf12804c2d",
    "contractAddress": "0xCd2Ca09366a16b0Bc374874D7B9d45C54AcDa900",
    "transactionIndex": 1,
    "gasUsed": "1047026",
    "logsBloom": "0x
    "blockHash": "0xa24048b6ddfab95c5f542dfe28591e7c04d7a312852b4cc35dcca346da56f6eb",
    "transactionHash": "0x6be7a71f958cad6cf33bcd08ccc73577550be56ef6ae6fdd672df0edafc474b8",
    "logs": [],
    "blockNumber": 24237544,
    "cumulativeGasUsed": "1113894",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D"
  ],
  "solcInputHash": "41ab1ad11db6b86fa47959e6916f2304",
  "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract UniswapV2\",\"name\":\"_uniswapV2\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"ETH_CONTRACT_ADDRESS\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"srcToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"srcQty\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"destToken\",\"type\":\"address\"}],\"name\":\"getAmountsOut\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"srcToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"srcQty\",\"type\":\"uint256\"},{\"internalType\":\"contract IERC20\",\"name\":\"destToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"}],\"name\":\"trade\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2\",\"outputs\":[{\"internalType\":\"contract UniswapV2\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wETH\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"constructor\":{\"details\":\"Contract constructor\",\"params\":{\"_uniswapV2\":\"uniswap routes contract address\"}},\"getAmountsOut(address,uint256,address)\":{\"details\":\"Given an input asset amount and an array of token addresses, calculates all subsequent maximum output token.\",\"params\":{\"destToken\":\"destination token contract address\",\"srcQty\":\"amount of source tokens\",\"srcToken\":\"source token contract address\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/uniswap_trade.sol\":\"UniswapV2Trade\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/IERC20.sol\":{\"content\":\"pragma solidity ^0.6.12;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\\n * the optional functions; to access them see `ERC20Detailed`.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a `Transfer` event.\\n     */\\n    function transfer(address recipient, uint amount) external;\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through `transferFrom`. This is\\n     * zero by default.\\n     *\\n     * This value changes when `approve` or `transferFrom` are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * > Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an `Approval` event.\\n     */\\n    function approve(address spender, uint amount) external;\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a `Transfer` event.\\n     */\\n    function transferFrom(address sender, address recipient, uint amount) external;\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() external view returns (uint);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to `approve`. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n}\\n\",\"keccak256\":\"0x4d24fe470f199b409b655c17f6b9389110d69db6c511b1a7e1701461db3dba47\"},\"contracts/trade_utils.sol\":{\"content\":\"pragma solidity ^0.6.12;\\n\\nimport './IERC20.sol';\\n\\ncontract TradeUtils {\\n\\tIERC20 constant public ETH_CONTRACT_ADDRESS = IERC20(0x0000000000000000000000000000000000000000);\\n\\n\\tfunction balanceOf(IERC20 token) internal view returns (uint256) {\\n\\t\\tif (token == ETH_CONTRACT_ADDRESS) {\\n\\t\\t\\treturn address(this).balance;\\n\\t\\t}\\n        return token.balanceOf(address(this));\\n    }\\n\\n\\tfunction transfer(IERC20 token, uint amount) internal {\\n\\t\\tif (token == ETH_CONTRACT_ADDRESS) {\\n\\t\\t\\trequire(address(this).balance >= amount);\\n\\t\\t\\t(bool success, ) = msg.sender.call{value: amount}(\\\"\\\");\\n          \\trequire(success);\\n\\t\\t} else {\\n\\t\\t\\ttoken.transfer(msg.sender, amount);\\n\\t\\t\\trequire(checkSuccess());\\n\\t\\t}\\n\\t}\\n\\n\\tfunction approve(IERC20 token, address proxy, uint amount) internal {\\n\\t\\tif (token != ETH_CONTRACT_ADDRESS) {\\n\\t\\t\\ttoken.approve(proxy, 0);\\n\\t\\t\\trequire(checkSuccess());\\n\\t\\t\\ttoken.approve(proxy, amount);\\n\\t\\t\\trequire(checkSuccess());\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n     * @dev Check if transfer() and transferFrom() of ERC20 succeeded or not\\n     * This check is needed to fix https://github.com/ethereum/solidity/issues/4116\\n     * This function is copied from https://github.com/AdExNetwork/adex-protocol-eth/blob/master/contracts/libs/SafeERC20.sol\\n     */\\n    function checkSuccess() internal pure returns (bool) {\\n\\t\\tuint256 returnValue = 0;\\n\\n\\t\\tassembly {\\n\\t\\t\\t// check number of bytes returned from last function call\\n\\t\\t\\tswitch returndatasize()\\n\\n\\t\\t\\t// no bytes returned: assume success\\n\\t\\t\\tcase 0x0 {\\n\\t\\t\\t\\treturnValue := 1\\n\\t\\t\\t}\\n\\n\\t\\t\\t// 32 bytes returned: check if non-zero\\n\\t\\t\\tcase 0x20 {\\n\\t\\t\\t\\t// copy 32 bytes into scratch space\\n\\t\\t\\t\\treturndatacopy(0x0, 0x0, 0x20)\\n\\n\\t\\t\\t\\t// load those bytes into returnValue\\n\\t\\t\\t\\treturnValue := mload(0x0)\\n\\t\\t\\t}\\n\\n\\t\\t\\t// not sure what was returned: don't mark as success\\n\\t\\t\\tdefault { }\\n\\t\\t}\\n\\t\\treturn returnValue != 0;\\n\\t}\\n}\\n\",\"keccak256\":\"0xa6e4a83518732d3fedbefbba13171d0dee61771c87496e54ab887b246e3f6d25\"},\"contracts/uniswap_trade.sol\":{\"content\":\"pragma solidity ^0.6.12;\\n\\nimport './trade_utils.sol';\\nimport './IERC20.sol';\\n\\ninterface UniswapV2 {\\n  function factory() external pure returns (address);\\n  function WETH() external pure returns (address);\\n\\n  function swapExactTokensForTokens(\\n      uint amountIn,\\n      uint amountOutMin,\\n      address[] calldata path,\\n      address to,\\n      uint deadline\\n  ) external returns (uint[] memory amounts);\\n  function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\\n      external\\n      payable\\n      returns (uint[] memory amounts);\\n  function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\\n      external\\n      returns (uint[] memory amounts);\\n  function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\\n}\\n\\ncontract UniswapV2Trade is TradeUtils {\\n    // Variables\\n    UniswapV2 public uniswapV2;\\n    address public wETH;\\n\\n    // Functions\\n    /**\\n     * @dev Contract constructor\\n     * @param _uniswapV2 uniswap routes contract address\\n     */\\n    constructor(UniswapV2 _uniswapV2) public {\\n        uniswapV2 = _uniswapV2;\\n        wETH = uniswapV2.WETH();\\n    }\\n\\n    // Reciever function which allows transfer eth.\\n    receive() external payable {}\\n\\n    function trade(IERC20 srcToken, uint srcQty, IERC20 destToken, uint amountOutMin) public payable returns (address, uint) {\\n        require(balanceOf(srcToken) >= srcQty);\\n        require(srcToken != destToken);\\n        address[] memory path = new address[](2);\\n        uint[] memory amounts;\\n        if (srcToken != ETH_CONTRACT_ADDRESS) {\\n            path[0] = address(srcToken);\\n            // approve\\n            approve(srcToken, address(uniswapV2), srcQty);\\n            if (destToken != ETH_CONTRACT_ADDRESS) { // token to token.\\n                path[1] = address(destToken);\\n                amounts = tokenToToken(path, srcQty, amountOutMin);\\n            } else {\\n                path[1] = address(wETH);\\n                amounts = tokenToEth(path, srcQty, amountOutMin);\\n            }\\n        } else {\\n            path[0] = address(wETH);\\n            path[1] = address(destToken);\\n            amounts = ethToToken(path, srcQty, amountOutMin);\\n        }\\n        require(amounts.length >= 2);\\n        require(amounts[amounts.length - 1] >= amountOutMin && amounts[0] == srcQty);\\n        return (address(destToken), amounts[amounts.length - 1]);\\n    }\\n\\n    function ethToToken(address[] memory path, uint srcQty, uint amountOutMin) internal returns (uint[] memory) {\\n        return uniswapV2.swapExactETHForTokens{value: srcQty}(amountOutMin, path, msg.sender, now + 600);\\n    }\\n\\n    function tokenToEth(address[] memory path, uint srcQty, uint amountOutMin) internal returns (uint[] memory) {\\n        return uniswapV2.swapExactTokensForETH(srcQty, amountOutMin, path, msg.sender, now + 600);\\n    }\\n\\n    function tokenToToken(address[] memory path, uint srcQty, uint amountOutMin) internal returns (uint[] memory) {\\n        return uniswapV2.swapExactTokensForTokens(srcQty, amountOutMin, path, msg.sender, now + 600);\\n    }\\n\\n    /**\\n     * @dev Given an input asset amount and an array of token addresses, calculates all subsequent maximum output token.\\n     * @param srcToken source token contract address\\n     * @param srcQty amount of source tokens\\n     * @param destToken destination token contract address\\n     */\\n    function getAmountsOut(address srcToken, uint srcQty, address destToken) external view returns(uint[] memory) {\\n        address[] memory path = new address[](2);\\n        path[0] = srcToken;\\n        path[1] = destToken;\\n        return uniswapV2.getAmountsOut(srcQty, path);\\n    }\\n}\\n\",\"keccak256\":\"0x13010ad5b36e04ce2b878f94437ba2a09220fd02f5f9512656f17e6a495840e8\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "constructor": {
        "details": "Contract constructor",
        "params": {
          "_uniswapV2": "uniswap routes contract address"
        }
      },
      "getAmountsOut(address,uint256,address)": {
        "details": "Given an input asset amount and an array of token addresses, calculates all subsequent maximum output token.",
        "params": {
          "destToken": "destination token contract address",
          "srcQty": "amount of source tokens",
          "srcToken": "source token contract address"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2554,
        "contract": "contracts/uniswap_trade.sol:UniswapV2Trade",
        "label": "uniswapV2",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(UniswapV2)2550"
      },
      {
        "astId": 2556,
        "contract": "contracts/uniswap_trade.sol:UniswapV2Trade",
        "label": "wETH",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_contract(UniswapV2)2550": {
        "encoding": "inplace",
        "label": "contract UniswapV2",
        "numberOfBytes": "20"
      }
    }
  }
}