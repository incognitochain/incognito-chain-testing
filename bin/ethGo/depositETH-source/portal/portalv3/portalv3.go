// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package portalv3

import (
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// PortalV3BurnInstData is an auto generated low-level Go binding around an user-defined struct.
type PortalV3BurnInstData struct {
	Meta    uint8
	Shard   uint8
	Tokens  []common.Address
	To      common.Address
	Amounts []*big.Int
	Itx     [32]byte
}

// Portalv3ABI is the input ABI used to generate the binding from.
const Portalv3ABI = "[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"Delegator\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenID\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"custodianIncAddress\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ndays\",\"type\":\"uint256\"}],\"name\":\"Extend\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"IncognitoProxy\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"name\":\"MetaData\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"pauser\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"pauser\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"token\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"amount\",\"type\":\"uint256[]\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ETH_TOKEN\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"delegator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"custodianIncAddress\",\"type\":\"string\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"custodianIncAddress\",\"type\":\"string\"}],\"name\":\"depositERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"expire\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"n\",\"type\":\"uint256\"}],\"name\":\"extend\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getDecimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"incognito\",\"outputs\":[{\"internalType\":\"contractIncognito\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"incognitoProxyAddress\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"metadata\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"inst\",\"type\":\"bytes\"}],\"name\":\"parseBurnInst\",\"outputs\":[{\"components\":[{\"internalType\":\"uint8\",\"name\":\"meta\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"shard\",\"type\":\"uint8\"},{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"addresspayable\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes32\",\"name\":\"itx\",\"type\":\"bytes32\"}],\"internalType\":\"structPortalV3.BurnInstData\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_incognitoProxy\",\"type\":\"address\"}],\"name\":\"updateIncognitoAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_meta\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"_value\",\"type\":\"bool\"}],\"name\":\"updateMetaData\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"inst\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"heights\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"instPaths\",\"type\":\"bytes32[]\"},{\"internalType\":\"bool[]\",\"name\":\"instPathIsLefts\",\"type\":\"bool[]\"},{\"internalType\":\"bytes32\",\"name\":\"instRoots\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"blkData\",\"type\":\"bytes32\"},{\"internalType\":\"uint256[]\",\"name\":\"sigIdxs\",\"type\":\"uint256[]\"},{\"internalType\":\"uint8[]\",\"name\":\"sigVs\",\"type\":\"uint8[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"sigRs\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"sigSs\",\"type\":\"bytes32[]\"}],\"name\":\"withdrawLockedTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"withdrawed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]"

// Portalv3Bin is the compiled bytecode used for deploying new contracts.
var Portalv3Bin = "0x60806040526001600360146101000a81548160ff0219169083151502179055506000600360156101000a81548160ff02191690831515021790555034801561004657600080fd5b5061354d806100566000396000f3fe6080604052600436106101145760003560e01c80638456cb59116100a0578063ce9b793011610064578063ce9b793014610356578063cf54aaa014610381578063dca40d9e146103be578063de94b4c8146103fb578063e0abace21461042457610114565b80638456cb59146102a65780638a984538146102bd5780639714378c146102e8578063a26e118614610311578063c4d66de81461032d57610114565b80635c975abb116100e75780635c975abb146101ad57806368036268146101d857806370a082311461020157806379599f961461023e5780637e16e6e11461026957610114565b80633a80a7c0146101195780633f4ba83a1461014257806358bc8337146101595780635a67cb8714610184575b600080fd5b34801561012557600080fd5b50610140600480360381019061013b9190611f6e565b610461565b005b34801561014e57600080fd5b506101576105c1565b005b34801561016557600080fd5b5061016e6106d7565b60405161017b9190612c96565b60405180910390f35b34801561019057600080fd5b506101ab60048036038101906101a69190611f97565b6106dc565b005b3480156101b957600080fd5b506101c2610a6f565b6040516101cf9190612db1565b60405180910390f35b3480156101e457600080fd5b506101ff60048036038101906101fa9190612096565b610a81565b005b34801561020d57600080fd5b5061022860048036038101906102239190611f6e565b610f76565b60405161023591906130be565b60405180910390f35b34801561024a57600080fd5b50610253611045565b60405161026091906130be565b60405180910390f35b34801561027557600080fd5b50610290600480360381019061028b9190612055565b61104b565b60405161029d919061309c565b60405180910390f35b3480156102b257600080fd5b506102bb6112bc565b005b3480156102c957600080fd5b506102d2611417565b6040516102df9190612ea1565b60405180910390f35b3480156102f457600080fd5b5061030f600480360381019061030a919061225e565b61143d565b005b61032b60048036038101906103269190612219565b611584565b005b34801561033957600080fd5b50610354600480360381019061034f9190611f6e565b6116e9565b005b34801561036257600080fd5b5061036b61181a565b6040516103789190612c96565b60405180910390f35b34801561038d57600080fd5b506103a860048036038101906103a39190611f6e565b611840565b6040516103b591906130d9565b60405180910390f35b3480156103ca57600080fd5b506103e560048036038101906103e0919061202c565b6118cc565b6040516103f29190612db1565b60405180910390f35b34801561040757600080fd5b50610422600480360381019061041d91906122d9565b6118ec565b005b34801561043057600080fd5b5061044b600480360381019061044691906122b0565b6119cf565b6040516104589190612db1565b60405180910390f35b6104696119ef565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146104d6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104cd9061305c565b60405180910390fd5b6000809054906101000a900460ff16610524576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161051b90612ebc565b60405180910390fd5b80600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507ff1e7743097e8400a8a63850dc1d480ad78a7125a8e57a671783a92e340af959f600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166040516105b69190612c96565b60405180910390a150565b6105c96119ef565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610636576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161062d9061305c565b60405180910390fd5b6000809054906101000a900460ff16610684576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161067b90612ebc565b60405180910390fd5b60008060006101000a81548160ff0219169083151502179055507f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa336040516106cd9190612cb1565b60405180910390a1565b600081565b6000809054906101000a900460ff161561072b576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107229061303c565b60405180910390fd5b600360149054906101000a900460ff1661077a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161077190612efc565b60405180910390fd5b6000600360146101000a81548160ff021916908315150217905550600084905060006107a586611840565b905060008273ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016107e29190612c96565b60206040518083038186803b1580156107fa57600080fd5b505afa15801561080e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108329190612287565b90506000819050600087905060098460ff1611156108755760098460ff1603600a0a818161085c57fe5b04905060098460ff1603600a0a838161087157fe5b0492505b670de0b6b3a764000081111580156108955750670de0b6b3a76400008311155b80156108bb5750670de0b6b3a76400006108b88483611a2090919063ffffffff16565b11155b6108fa576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108f190612fdc565b60405180910390fd5b8473ffffffffffffffffffffffffffffffffffffffff166323b872dd33308b6040518463ffffffff1660e01b815260040161093793929190612ccc565b600060405180830381600087803b15801561095157600080fd5b505af1158015610965573d6000803e3d6000fd5b50505050610971611a4b565b6109b0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109a79061307c565b60405180910390fd5b876109cc836109be8c610f76565b611a8990919063ffffffff16565b14610a0c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a0390612ffc565b60405180910390fd5b7f2d4b597935f3cd67fb2eebf1db4debc934cee5c7baa7153f980fdbeb2e74084e89888884604051610a419493929190612d2c565b60405180910390a150505050506001600360146101000a81548160ff02191690831515021790555050505050565b6000809054906101000a900460ff1681565b6000809054906101000a900460ff1615610ad0576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ac79061303c565b60405180910390fd5b600360149054906101000a900460ff16610b1f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b1690612efc565b60405180910390fd5b6000600360146101000a81548160ff021916908315150217905550610b42611bdc565b610b4b8b61104b565b905060046000826000015160ff1660ff16815260200190815260200160002060009054906101000a900460ff16610bb7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bae90612edc565b60405180910390fd5b600560008260a00151815260200190815260200160002060009054906101000a900460ff1615610c1c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c1390612f7c565b60405180910390fd5b6001600560008360a00151815260200190815260200160002060006101000a81548160ff021916908315150217905550610c5e8b8b8b8b8b8b8b8b8b8b611aa3565b60008090505b8160400151518160ff161015610f0657600073ffffffffffffffffffffffffffffffffffffffff1682604001518260ff1681518110610c9f57fe5b602002602001015173ffffffffffffffffffffffffffffffffffffffff1614610e2d576000610ce783604001518360ff1681518110610cda57fe5b6020026020010151611840565b905060098160ff161115610d3b5760098160ff1603600a0a83608001518360ff1681518110610d1257fe5b60200260200101510283608001518360ff1681518110610d2e57fe5b6020026020010181815250505b82604001518260ff1681518110610d4e57fe5b602002602001015173ffffffffffffffffffffffffffffffffffffffff1663a9059cbb846060015185608001518560ff1681518110610d8957fe5b60200260200101516040518363ffffffff1660e01b8152600401610dae929190612d03565b600060405180830381600087803b158015610dc857600080fd5b505af1158015610ddc573d6000803e3d6000fd5b50505050610de8611a4b565b610e27576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e1e9061301c565b60405180910390fd5b50610ef9565b6000826060015173ffffffffffffffffffffffffffffffffffffffff1683608001518360ff1681518110610e5d57fe5b6020026020010151604051610e7190612c81565b60006040518083038185875af1925050503d8060008114610eae576040519150601f19603f3d011682016040523d82523d6000602084013e610eb3565b606091505b5050905080610ef7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610eee9061301c565b60405180910390fd5b505b8080600101915050610c64565b507f8437483ccb01a763b6d83300297a37a38b17c805730605c1df6c676bf4c1a20b816040015182606001518360800151604051610f4693929190612d6c565b60405180910390a1506001600360146101000a81548160ff02191690831515021790555050505050505050505050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610fb457479050611040565b8173ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401610fed9190612c96565b60206040518083038186803b15801561100557600080fd5b505afa158015611019573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061103d9190612287565b90505b919050565b60015481565b611053611bdc565b600382511015611098576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161108f90612f3c565b60405180910390fd5b6110a0611bdc565b826000815181106110ad57fe5b602001015160f81c60f81b60f81c816000019060ff16908160ff1681525050826001815181106110d957fe5b602001015160f81c60f81b60f81c816020019060ff16908160ff168152505060008360028151811061110757fe5b602001015160f81c60f81b60f81c90508060400260aa0160ff16845114611163576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161115a90612f1c565b60405180910390fd5b60608160ff1667ffffffffffffffff8111801561117f57600080fd5b506040519080825280602002602001820160405280156111ae5781602001602082028036833780820191505090505b509050600060608360ff1667ffffffffffffffff811180156111cf57600080fd5b506040519080825280602002602001820160405280156111fe5781602001602082028036833780820191505090505b5090506000608a88015192508460400260aa0188015190506000600190505b8560ff168160ff16116112595760408102606a018901518160200286015260408102608a0189015181602002840152808060010191505061121d565b5083866040018190525082866060019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050818660800181905250808660a0018181525050859650505050505050919050565b6112c46119ef565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611331576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113289061305c565b60405180910390fd5b6000809054906101000a900460ff1615611380576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113779061303c565b60405180910390fd5b60015442106113c4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113bb90612f5c565b60405180910390fd5b60016000806101000a81548160ff0219169083151502179055507f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2583360405161140d9190612cb1565b60405180910390a1565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6114456119ef565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146114b2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114a99061305c565b60405180910390fd5b60015442106114f6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114ed90612f5c565b60405180910390fd5b61016e811061153a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161153190612fbc565b60405180910390fd5b620151808102600154016001819055507f02ef6561d311451dadc920679eb21192a61d96ee8ead94241b8ff073029ca6e88160405161157991906130be565b60405180910390a150565b6000809054906101000a900460ff16156115d3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115ca9061303c565b60405180910390fd5b600360149054906101000a900460ff16611622576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161161990612efc565b60405180910390fd5b6000600360146101000a81548160ff0219169083151502179055506b033b2e3c9fd0803ce800000047111561168c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161168390612fdc565b60405180910390fd5b7f2d4b597935f3cd67fb2eebf1db4debc934cee5c7baa7153f980fdbeb2e74084e60008383346040516116c29493929190612d2c565b60405180910390a16001600360146101000a81548160ff0219169083151502179055505050565b600360159054906101000a900460ff161561170357600080fd5b80600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506305a39a80420160018190555060016004600060aa60ff16815260200190815260200160002060006101000a81548160ff02191690831515021790555060016004600060ab60ff16815260200190815260200160002060006101000a81548160ff02191690831515021790555060016004600060ac60ff16815260200190815260200160002060006101000a81548160ff0219169083151502179055506001600360156101000a81548160ff0219169083151502179055506001600360146101000a81548160ff02191690831515021790555050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000808290508073ffffffffffffffffffffffffffffffffffffffff1663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b15801561188c57600080fd5b505afa1580156118a0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118c49190612287565b915050919050565b60056020528060005260406000206000915054906101000a900460ff1681565b6118f46119ef565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611961576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016119589061305c565b60405180910390fd5b80600460008460ff1660ff16815260200190815260200160002060006101000a81548160ff0219169083151502179055507fd7a3145b1f09160ed2cd7faebbc906ee028ee236f0d6564691b17dd738604c1782826040516119c39291906130f4565b60405180910390a15050565b60046020528060005260406000206000915054906101000a900460ff1681565b6000807fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d610360001b9050805491505090565b6000808284019050838110158015611a385750828110155b611a4157600080fd5b8091505092915050565b600080600090503d60008114611a685760208114611a7157611a7d565b60019150611a7d565b60206000803e60005191505b50600081141591505090565b600082821115611a9857600080fd5b818303905092915050565b60008a8a604051602001611ab8929190612c59565b604051602081830303815290604052805190602001209050600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f65d21166001838d8d8d8d8d8d8d8d8d6040518c63ffffffff1660e01b8152600401611b409b9a99989796959493929190612dcc565b60206040518083038186803b158015611b5857600080fd5b505afa158015611b6c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b909190612003565b611bcf576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611bc690612f9c565b60405180910390fd5b5050505050505050505050565b6040518060c00160405280600060ff168152602001600060ff16815260200160608152602001600073ffffffffffffffffffffffffffffffffffffffff16815260200160608152602001600080191681525090565b600081359050611c40816134a4565b92915050565b600082601f830112611c5757600080fd5b8135611c6a611c658261314a565b61311d565b91508181835260208401935060208101905083856020840282011115611c8f57600080fd5b60005b83811015611cbf5781611ca58882611e52565b845260208401935060208301925050600181019050611c92565b5050505092915050565b600082601f830112611cda57600080fd5b8135611ced611ce882613172565b61311d565b91508181835260208401935060208101905083856020840282011115611d1257600080fd5b60005b83811015611d425781611d288882611e7c565b845260208401935060208301925050600181019050611d15565b5050505092915050565b600082601f830112611d5d57600080fd5b8135611d70611d6b8261319a565b61311d565b91508181835260208401935060208101905083856020840282011115611d9557600080fd5b60005b83811015611dc55781611dab8882611f2f565b845260208401935060208301925050600181019050611d98565b5050505092915050565b600082601f830112611de057600080fd5b8135611df3611dee826131c2565b61311d565b91508181835260208401935060208101905083856020840282011115611e1857600080fd5b60005b83811015611e485781611e2e8882611f59565b845260208401935060208301925050600181019050611e1b565b5050505092915050565b600081359050611e61816134bb565b92915050565b600081519050611e76816134bb565b92915050565b600081359050611e8b816134d2565b92915050565b600082601f830112611ea257600080fd5b8135611eb5611eb0826131ea565b61311d565b91508082526020830160208301858383011115611ed157600080fd5b611edc838284613447565b50505092915050565b60008083601f840112611ef757600080fd5b8235905067ffffffffffffffff811115611f1057600080fd5b602083019150836001820283011115611f2857600080fd5b9250929050565b600081359050611f3e816134e9565b92915050565b600081519050611f53816134e9565b92915050565b600081359050611f6881613500565b92915050565b600060208284031215611f8057600080fd5b6000611f8e84828501611c31565b91505092915050565b60008060008060608587031215611fad57600080fd5b6000611fbb87828801611c31565b9450506020611fcc87828801611f2f565b935050604085013567ffffffffffffffff811115611fe957600080fd5b611ff587828801611ee5565b925092505092959194509250565b60006020828403121561201557600080fd5b600061202384828501611e67565b91505092915050565b60006020828403121561203e57600080fd5b600061204c84828501611e7c565b91505092915050565b60006020828403121561206757600080fd5b600082013567ffffffffffffffff81111561208157600080fd5b61208d84828501611e91565b91505092915050565b6000806000806000806000806000806101408b8d0312156120b657600080fd5b60008b013567ffffffffffffffff8111156120d057600080fd5b6120dc8d828e01611e91565b9a505060206120ed8d828e01611f2f565b99505060408b013567ffffffffffffffff81111561210a57600080fd5b6121168d828e01611cc9565b98505060608b013567ffffffffffffffff81111561213357600080fd5b61213f8d828e01611c46565b97505060806121508d828e01611e7c565b96505060a06121618d828e01611e7c565b95505060c08b013567ffffffffffffffff81111561217e57600080fd5b61218a8d828e01611d4c565b94505060e08b013567ffffffffffffffff8111156121a757600080fd5b6121b38d828e01611dcf565b9350506101008b013567ffffffffffffffff8111156121d157600080fd5b6121dd8d828e01611cc9565b9250506101208b013567ffffffffffffffff8111156121fb57600080fd5b6122078d828e01611cc9565b9150509295989b9194979a5092959850565b6000806020838503121561222c57600080fd5b600083013567ffffffffffffffff81111561224657600080fd5b61225285828601611ee5565b92509250509250929050565b60006020828403121561227057600080fd5b600061227e84828501611f2f565b91505092915050565b60006020828403121561229957600080fd5b60006122a784828501611f44565b91505092915050565b6000602082840312156122c257600080fd5b60006122d084828501611f59565b91505092915050565b600080604083850312156122ec57600080fd5b60006122fa85828601611f59565b925050602061230b85828601611e52565b9150509250929050565b600061232183836123ab565b60208301905092915050565b6000612339838361265b565b60208301905092915050565b60006123518383612679565b60208301905092915050565b60006123698383612c06565b60208301905092915050565b60006123818383612c3b565b60208301905092915050565b612396816133ed565b82525050565b6123a58161338e565b82525050565b6123b48161337c565b82525050565b6123c38161337c565b82525050565b60006123d482613266565b6123de81856132e9565b93506123e983613216565b8060005b8381101561241a5781516124018882612315565b975061240c836132a8565b9250506001810190506123ed565b5085935050505092915050565b600061243282613266565b61243c81856132fa565b935061244783613216565b8060005b8381101561247857815161245f8882612315565b975061246a836132a8565b92505060018101905061244b565b5085935050505092915050565b600061249082613271565b61249a818561330b565b93506124a583613226565b8060005b838110156124d65781516124bd888261232d565b97506124c8836132b5565b9250506001810190506124a9565b5085935050505092915050565b60006124ee8261327c565b6124f8818561331c565b935061250383613236565b8060005b8381101561253457815161251b8882612345565b9750612526836132c2565b925050600181019050612507565b5085935050505092915050565b600061254c82613287565b612556818561332d565b935061256183613246565b8060005b83811015612592578151612579888261235d565b9750612584836132cf565b925050600181019050612565565b5085935050505092915050565b60006125aa82613287565b6125b4818561333e565b93506125bf83613246565b8060005b838110156125f05781516125d7888261235d565b97506125e2836132cf565b9250506001810190506125c3565b5085935050505092915050565b600061260882613292565b612612818561334f565b935061261d83613256565b8060005b8381101561264e5781516126358882612375565b9750612640836132dc565b925050600181019050612621565b5085935050505092915050565b612664816133a0565b82525050565b612673816133a0565b82525050565b612682816133ac565b82525050565b612691816133ac565b82525050565b60006126a28261329d565b6126ac8185613360565b93506126bc818560208601613456565b80840191505092915050565b6126d1816133ff565b82525050565b60006126e3838561336b565b93506126f0838584613447565b6126f983613493565b840190509392505050565b600061271160148361336b565b91507f6e6f7420706175736564207269676874206e6f770000000000000000000000006000830152602082019050919050565b600061275160288361336b565b91507f6d657461646174612074797065206973206e6f7420616c6c6f776564206f6e2060008301527f706f7274616c76330000000000000000000000000000000000000000000000006020830152604082019050919050565b60006127b7601a8361336b565b91507f63616e206e6f74207265656e7472616e7420746f207661756c740000000000006000830152602082019050919050565b60006127f760138361336b565b91507f496e76616c696420696e737472756374696f6e000000000000000000000000006000830152602082019050919050565b600061283760298361336b565b91507f4c656e677468206f6620696e737472756374696f6e206d75737420677265617460008301527f6572207468616e203300000000000000000000000000000000000000000000006020830152604082019050919050565b600061289d60078361336b565b91507f65787069726564000000000000000000000000000000000000000000000000006000830152602082019050919050565b60006128dd60218361336b565b91507f7769746864726177207472616e73616374696f6e20616c72656164792075736560008301527f64000000000000000000000000000000000000000000000000000000000000006020830152604082019050919050565b600061294360188361336b565b91507f696e76616c696420696e737472756374696f6e206461746100000000000000006000830152602082019050919050565b6000612983601a8361336b565b91507f63616e6e6f7420657874656e6420666f7220746f6f206c6f6e670000000000006000830152602082019050919050565b60006129c360118361336b565b91507f6d61782076616c756520726561636865640000000000000000000000000000006000830152602082019050919050565b6000612a03602d8361336b565b91507f74686520696e70757420616d6f756e74206e6f7420657175616c20746f20616d60008301527f6f756e74207265636569766564000000000000000000000000000000000000006020830152604082019050919050565b6000612a69601a8361336b565b91507f696e7465726e616c207472616e73616374696f6e206572726f720000000000006000830152602082019050919050565b6000612aa9600083613360565b9150600082019050919050565b6000612ac360108361336b565b91507f706175736564207269676874206e6f77000000000000000000000000000000006000830152602082019050919050565b6000612b0360098361336b565b91507f6e6f742061646d696e00000000000000000000000000000000000000000000006000830152602082019050919050565b6000612b4360178361336b565b91507f7472616e736665722066726f6d20676f74206572726f720000000000000000006000830152602082019050919050565b600060c083016000830151612b8e6000860182612c3b565b506020830151612ba16020860182612c3b565b5060408301518482036040860152612bb982826123c9565b9150506060830151612bce606086018261239c565b5060808301518482036080860152612be68282612541565b91505060a0830151612bfb60a0860182612679565b508091505092915050565b612c0f816133d6565b82525050565b612c1e816133d6565b82525050565b612c35612c30826133d6565b613489565b82525050565b612c44816133e0565b82525050565b612c53816133e0565b82525050565b6000612c658285612697565b9150612c718284612c24565b6020820191508190509392505050565b6000612c8c82612a9c565b9150819050919050565b6000602082019050612cab60008301846123ba565b92915050565b6000602082019050612cc6600083018461238d565b92915050565b6000606082019050612ce1600083018661238d565b612cee60208301856123ba565b612cfb6040830184612c15565b949350505050565b6000604082019050612d18600083018561238d565b612d256020830184612c15565b9392505050565b6000606082019050612d4160008301876123ba565b8181036020830152612d548185876126d7565b9050612d636040830184612c15565b95945050505050565b60006060820190508181036000830152612d868186612427565b9050612d95602083018561238d565b8181036040830152612da7818461259f565b9050949350505050565b6000602082019050612dc6600083018461266a565b92915050565b600061016082019050612de2600083018e61266a565b612def602083018d612688565b612dfc604083018c612c15565b8181036060830152612e0e818b6124e3565b90508181036080830152612e22818a612485565b9050612e3160a0830189612688565b612e3e60c0830188612688565b81810360e0830152612e50818761259f565b9050818103610100830152612e6581866125fd565b9050818103610120830152612e7a81856124e3565b9050818103610140830152612e8f81846124e3565b90509c9b505050505050505050505050565b6000602082019050612eb660008301846126c8565b92915050565b60006020820190508181036000830152612ed581612704565b9050919050565b60006020820190508181036000830152612ef581612744565b9050919050565b60006020820190508181036000830152612f15816127aa565b9050919050565b60006020820190508181036000830152612f35816127ea565b9050919050565b60006020820190508181036000830152612f558161282a565b9050919050565b60006020820190508181036000830152612f7581612890565b9050919050565b60006020820190508181036000830152612f95816128d0565b9050919050565b60006020820190508181036000830152612fb581612936565b9050919050565b60006020820190508181036000830152612fd581612976565b9050919050565b60006020820190508181036000830152612ff5816129b6565b9050919050565b60006020820190508181036000830152613015816129f6565b9050919050565b6000602082019050818103600083015261303581612a5c565b9050919050565b6000602082019050818103600083015261305581612ab6565b9050919050565b6000602082019050818103600083015261307581612af6565b9050919050565b6000602082019050818103600083015261309581612b36565b9050919050565b600060208201905081810360008301526130b68184612b76565b905092915050565b60006020820190506130d36000830184612c15565b92915050565b60006020820190506130ee6000830184612c4a565b92915050565b60006040820190506131096000830185612c4a565b613116602083018461266a565b9392505050565b6000604051905081810181811067ffffffffffffffff8211171561314057600080fd5b8060405250919050565b600067ffffffffffffffff82111561316157600080fd5b602082029050602081019050919050565b600067ffffffffffffffff82111561318957600080fd5b602082029050602081019050919050565b600067ffffffffffffffff8211156131b157600080fd5b602082029050602081019050919050565b600067ffffffffffffffff8211156131d957600080fd5b602082029050602081019050919050565b600067ffffffffffffffff82111561320157600080fd5b601f19601f8301169050602081019050919050565b6000819050602082019050919050565b6000819050602082019050919050565b6000819050602082019050919050565b6000819050602082019050919050565b6000819050602082019050919050565b600081519050919050565b600081519050919050565b600081519050919050565b600081519050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b6000602082019050919050565b6000602082019050919050565b6000602082019050919050565b6000602082019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600081905092915050565b600082825260208201905092915050565b6000613387826133b6565b9050919050565b6000613399826133b6565b9050919050565b60008115159050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060ff82169050919050565b60006133f882613423565b9050919050565b600061340a82613411565b9050919050565b600061341c826133b6565b9050919050565b600061342e82613435565b9050919050565b6000613440826133b6565b9050919050565b82818337600083830152505050565b60005b83811015613474578082015181840152602081019050613459565b83811115613483576000848401525b50505050565b6000819050919050565b6000601f19601f8301169050919050565b6134ad8161337c565b81146134b857600080fd5b50565b6134c4816133a0565b81146134cf57600080fd5b50565b6134db816133ac565b81146134e657600080fd5b50565b6134f2816133d6565b81146134fd57600080fd5b50565b613509816133e0565b811461351457600080fd5b5056fea2646970667358221220973773659dd75e177f1e853e37a4e047d751059779a939c446177131d7a8be5b64736f6c63430006060033"

// DeployPortalv3 deploys a new Ethereum contract, binding an instance of Portalv3 to it.
func DeployPortalv3(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *Portalv3, error) {
	parsed, err := abi.JSON(strings.NewReader(Portalv3ABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(Portalv3Bin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Portalv3{Portalv3Caller: Portalv3Caller{contract: contract}, Portalv3Transactor: Portalv3Transactor{contract: contract}, Portalv3Filterer: Portalv3Filterer{contract: contract}}, nil
}

// Portalv3 is an auto generated Go binding around an Ethereum contract.
type Portalv3 struct {
	Portalv3Caller     // Read-only binding to the contract
	Portalv3Transactor // Write-only binding to the contract
	Portalv3Filterer   // Log filterer for contract events
}

// Portalv3Caller is an auto generated read-only Go binding around an Ethereum contract.
type Portalv3Caller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// Portalv3Transactor is an auto generated write-only Go binding around an Ethereum contract.
type Portalv3Transactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// Portalv3Filterer is an auto generated log filtering Go binding around an Ethereum contract events.
type Portalv3Filterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// Portalv3Session is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type Portalv3Session struct {
	Contract     *Portalv3         // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// Portalv3CallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type Portalv3CallerSession struct {
	Contract *Portalv3Caller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts   // Call options to use throughout this session
}

// Portalv3TransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type Portalv3TransactorSession struct {
	Contract     *Portalv3Transactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts   // Transaction auth options to use throughout this session
}

// Portalv3Raw is an auto generated low-level Go binding around an Ethereum contract.
type Portalv3Raw struct {
	Contract *Portalv3 // Generic contract binding to access the raw methods on
}

// Portalv3CallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type Portalv3CallerRaw struct {
	Contract *Portalv3Caller // Generic read-only contract binding to access the raw methods on
}

// Portalv3TransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type Portalv3TransactorRaw struct {
	Contract *Portalv3Transactor // Generic write-only contract binding to access the raw methods on
}

// NewPortalv3 creates a new instance of Portalv3, bound to a specific deployed contract.
func NewPortalv3(address common.Address, backend bind.ContractBackend) (*Portalv3, error) {
	contract, err := bindPortalv3(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Portalv3{Portalv3Caller: Portalv3Caller{contract: contract}, Portalv3Transactor: Portalv3Transactor{contract: contract}, Portalv3Filterer: Portalv3Filterer{contract: contract}}, nil
}

// NewPortalv3Caller creates a new read-only instance of Portalv3, bound to a specific deployed contract.
func NewPortalv3Caller(address common.Address, caller bind.ContractCaller) (*Portalv3Caller, error) {
	contract, err := bindPortalv3(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &Portalv3Caller{contract: contract}, nil
}

// NewPortalv3Transactor creates a new write-only instance of Portalv3, bound to a specific deployed contract.
func NewPortalv3Transactor(address common.Address, transactor bind.ContractTransactor) (*Portalv3Transactor, error) {
	contract, err := bindPortalv3(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &Portalv3Transactor{contract: contract}, nil
}

// NewPortalv3Filterer creates a new log filterer instance of Portalv3, bound to a specific deployed contract.
func NewPortalv3Filterer(address common.Address, filterer bind.ContractFilterer) (*Portalv3Filterer, error) {
	contract, err := bindPortalv3(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &Portalv3Filterer{contract: contract}, nil
}

// bindPortalv3 binds a generic wrapper to an already deployed contract.
func bindPortalv3(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(Portalv3ABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Portalv3 *Portalv3Raw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _Portalv3.Contract.Portalv3Caller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Portalv3 *Portalv3Raw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Portalv3.Contract.Portalv3Transactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Portalv3 *Portalv3Raw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Portalv3.Contract.Portalv3Transactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Portalv3 *Portalv3CallerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _Portalv3.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Portalv3 *Portalv3TransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Portalv3.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Portalv3 *Portalv3TransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Portalv3.Contract.contract.Transact(opts, method, params...)
}

// ETHTOKEN is a free data retrieval call binding the contract method 0x58bc8337.
//
// Solidity: function ETH_TOKEN() view returns(address)
func (_Portalv3 *Portalv3Caller) ETHTOKEN(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _Portalv3.contract.Call(opts, out, "ETH_TOKEN")
	return *ret0, err
}

// ETHTOKEN is a free data retrieval call binding the contract method 0x58bc8337.
//
// Solidity: function ETH_TOKEN() view returns(address)
func (_Portalv3 *Portalv3Session) ETHTOKEN() (common.Address, error) {
	return _Portalv3.Contract.ETHTOKEN(&_Portalv3.CallOpts)
}

// ETHTOKEN is a free data retrieval call binding the contract method 0x58bc8337.
//
// Solidity: function ETH_TOKEN() view returns(address)
func (_Portalv3 *Portalv3CallerSession) ETHTOKEN() (common.Address, error) {
	return _Portalv3.Contract.ETHTOKEN(&_Portalv3.CallOpts)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address token) view returns(uint256)
func (_Portalv3 *Portalv3Caller) BalanceOf(opts *bind.CallOpts, token common.Address) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _Portalv3.contract.Call(opts, out, "balanceOf", token)
	return *ret0, err
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address token) view returns(uint256)
func (_Portalv3 *Portalv3Session) BalanceOf(token common.Address) (*big.Int, error) {
	return _Portalv3.Contract.BalanceOf(&_Portalv3.CallOpts, token)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address token) view returns(uint256)
func (_Portalv3 *Portalv3CallerSession) BalanceOf(token common.Address) (*big.Int, error) {
	return _Portalv3.Contract.BalanceOf(&_Portalv3.CallOpts, token)
}

// Delegator is a free data retrieval call binding the contract method 0xce9b7930.
//
// Solidity: function delegator() view returns(address)
func (_Portalv3 *Portalv3Caller) Delegator(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _Portalv3.contract.Call(opts, out, "delegator")
	return *ret0, err
}

// Delegator is a free data retrieval call binding the contract method 0xce9b7930.
//
// Solidity: function delegator() view returns(address)
func (_Portalv3 *Portalv3Session) Delegator() (common.Address, error) {
	return _Portalv3.Contract.Delegator(&_Portalv3.CallOpts)
}

// Delegator is a free data retrieval call binding the contract method 0xce9b7930.
//
// Solidity: function delegator() view returns(address)
func (_Portalv3 *Portalv3CallerSession) Delegator() (common.Address, error) {
	return _Portalv3.Contract.Delegator(&_Portalv3.CallOpts)
}

// Expire is a free data retrieval call binding the contract method 0x79599f96.
//
// Solidity: function expire() view returns(uint256)
func (_Portalv3 *Portalv3Caller) Expire(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _Portalv3.contract.Call(opts, out, "expire")
	return *ret0, err
}

// Expire is a free data retrieval call binding the contract method 0x79599f96.
//
// Solidity: function expire() view returns(uint256)
func (_Portalv3 *Portalv3Session) Expire() (*big.Int, error) {
	return _Portalv3.Contract.Expire(&_Portalv3.CallOpts)
}

// Expire is a free data retrieval call binding the contract method 0x79599f96.
//
// Solidity: function expire() view returns(uint256)
func (_Portalv3 *Portalv3CallerSession) Expire() (*big.Int, error) {
	return _Portalv3.Contract.Expire(&_Portalv3.CallOpts)
}

// GetDecimals is a free data retrieval call binding the contract method 0xcf54aaa0.
//
// Solidity: function getDecimals(address token) view returns(uint8)
func (_Portalv3 *Portalv3Caller) GetDecimals(opts *bind.CallOpts, token common.Address) (uint8, error) {
	var (
		ret0 = new(uint8)
	)
	out := ret0
	err := _Portalv3.contract.Call(opts, out, "getDecimals", token)
	return *ret0, err
}

// GetDecimals is a free data retrieval call binding the contract method 0xcf54aaa0.
//
// Solidity: function getDecimals(address token) view returns(uint8)
func (_Portalv3 *Portalv3Session) GetDecimals(token common.Address) (uint8, error) {
	return _Portalv3.Contract.GetDecimals(&_Portalv3.CallOpts, token)
}

// GetDecimals is a free data retrieval call binding the contract method 0xcf54aaa0.
//
// Solidity: function getDecimals(address token) view returns(uint8)
func (_Portalv3 *Portalv3CallerSession) GetDecimals(token common.Address) (uint8, error) {
	return _Portalv3.Contract.GetDecimals(&_Portalv3.CallOpts, token)
}

// Incognito is a free data retrieval call binding the contract method 0x8a984538.
//
// Solidity: function incognito() view returns(address)
func (_Portalv3 *Portalv3Caller) Incognito(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _Portalv3.contract.Call(opts, out, "incognito")
	return *ret0, err
}

// Incognito is a free data retrieval call binding the contract method 0x8a984538.
//
// Solidity: function incognito() view returns(address)
func (_Portalv3 *Portalv3Session) Incognito() (common.Address, error) {
	return _Portalv3.Contract.Incognito(&_Portalv3.CallOpts)
}

// Incognito is a free data retrieval call binding the contract method 0x8a984538.
//
// Solidity: function incognito() view returns(address)
func (_Portalv3 *Portalv3CallerSession) Incognito() (common.Address, error) {
	return _Portalv3.Contract.Incognito(&_Portalv3.CallOpts)
}

// Metadata is a free data retrieval call binding the contract method 0xe0abace2.
//
// Solidity: function metadata(uint8 ) view returns(bool)
func (_Portalv3 *Portalv3Caller) Metadata(opts *bind.CallOpts, arg0 uint8) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _Portalv3.contract.Call(opts, out, "metadata", arg0)
	return *ret0, err
}

// Metadata is a free data retrieval call binding the contract method 0xe0abace2.
//
// Solidity: function metadata(uint8 ) view returns(bool)
func (_Portalv3 *Portalv3Session) Metadata(arg0 uint8) (bool, error) {
	return _Portalv3.Contract.Metadata(&_Portalv3.CallOpts, arg0)
}

// Metadata is a free data retrieval call binding the contract method 0xe0abace2.
//
// Solidity: function metadata(uint8 ) view returns(bool)
func (_Portalv3 *Portalv3CallerSession) Metadata(arg0 uint8) (bool, error) {
	return _Portalv3.Contract.Metadata(&_Portalv3.CallOpts, arg0)
}

// ParseBurnInst is a free data retrieval call binding the contract method 0x7e16e6e1.
//
// Solidity: function parseBurnInst(bytes inst) pure returns((uint8,uint8,address[],address,uint256[],bytes32))
func (_Portalv3 *Portalv3Caller) ParseBurnInst(opts *bind.CallOpts, inst []byte) (PortalV3BurnInstData, error) {
	var (
		ret0 = new(PortalV3BurnInstData)
	)
	out := ret0
	err := _Portalv3.contract.Call(opts, out, "parseBurnInst", inst)
	return *ret0, err
}

// ParseBurnInst is a free data retrieval call binding the contract method 0x7e16e6e1.
//
// Solidity: function parseBurnInst(bytes inst) pure returns((uint8,uint8,address[],address,uint256[],bytes32))
func (_Portalv3 *Portalv3Session) ParseBurnInst(inst []byte) (PortalV3BurnInstData, error) {
	return _Portalv3.Contract.ParseBurnInst(&_Portalv3.CallOpts, inst)
}

// ParseBurnInst is a free data retrieval call binding the contract method 0x7e16e6e1.
//
// Solidity: function parseBurnInst(bytes inst) pure returns((uint8,uint8,address[],address,uint256[],bytes32))
func (_Portalv3 *Portalv3CallerSession) ParseBurnInst(inst []byte) (PortalV3BurnInstData, error) {
	return _Portalv3.Contract.ParseBurnInst(&_Portalv3.CallOpts, inst)
}

// Paused is a free data retrieval call binding the contract method 0x5c975abb.
//
// Solidity: function paused() view returns(bool)
func (_Portalv3 *Portalv3Caller) Paused(opts *bind.CallOpts) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _Portalv3.contract.Call(opts, out, "paused")
	return *ret0, err
}

// Paused is a free data retrieval call binding the contract method 0x5c975abb.
//
// Solidity: function paused() view returns(bool)
func (_Portalv3 *Portalv3Session) Paused() (bool, error) {
	return _Portalv3.Contract.Paused(&_Portalv3.CallOpts)
}

// Paused is a free data retrieval call binding the contract method 0x5c975abb.
//
// Solidity: function paused() view returns(bool)
func (_Portalv3 *Portalv3CallerSession) Paused() (bool, error) {
	return _Portalv3.Contract.Paused(&_Portalv3.CallOpts)
}

// Withdrawed is a free data retrieval call binding the contract method 0xdca40d9e.
//
// Solidity: function withdrawed(bytes32 ) view returns(bool)
func (_Portalv3 *Portalv3Caller) Withdrawed(opts *bind.CallOpts, arg0 [32]byte) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _Portalv3.contract.Call(opts, out, "withdrawed", arg0)
	return *ret0, err
}

// Withdrawed is a free data retrieval call binding the contract method 0xdca40d9e.
//
// Solidity: function withdrawed(bytes32 ) view returns(bool)
func (_Portalv3 *Portalv3Session) Withdrawed(arg0 [32]byte) (bool, error) {
	return _Portalv3.Contract.Withdrawed(&_Portalv3.CallOpts, arg0)
}

// Withdrawed is a free data retrieval call binding the contract method 0xdca40d9e.
//
// Solidity: function withdrawed(bytes32 ) view returns(bool)
func (_Portalv3 *Portalv3CallerSession) Withdrawed(arg0 [32]byte) (bool, error) {
	return _Portalv3.Contract.Withdrawed(&_Portalv3.CallOpts, arg0)
}

// Deposit is a paid mutator transaction binding the contract method 0xa26e1186.
//
// Solidity: function deposit(string custodianIncAddress) payable returns()
func (_Portalv3 *Portalv3Transactor) Deposit(opts *bind.TransactOpts, custodianIncAddress string) (*types.Transaction, error) {
	return _Portalv3.contract.Transact(opts, "deposit", custodianIncAddress)
}

// Deposit is a paid mutator transaction binding the contract method 0xa26e1186.
//
// Solidity: function deposit(string custodianIncAddress) payable returns()
func (_Portalv3 *Portalv3Session) Deposit(custodianIncAddress string) (*types.Transaction, error) {
	return _Portalv3.Contract.Deposit(&_Portalv3.TransactOpts, custodianIncAddress)
}

// Deposit is a paid mutator transaction binding the contract method 0xa26e1186.
//
// Solidity: function deposit(string custodianIncAddress) payable returns()
func (_Portalv3 *Portalv3TransactorSession) Deposit(custodianIncAddress string) (*types.Transaction, error) {
	return _Portalv3.Contract.Deposit(&_Portalv3.TransactOpts, custodianIncAddress)
}

// DepositERC20 is a paid mutator transaction binding the contract method 0x5a67cb87.
//
// Solidity: function depositERC20(address token, uint256 amount, string custodianIncAddress) returns()
func (_Portalv3 *Portalv3Transactor) DepositERC20(opts *bind.TransactOpts, token common.Address, amount *big.Int, custodianIncAddress string) (*types.Transaction, error) {
	return _Portalv3.contract.Transact(opts, "depositERC20", token, amount, custodianIncAddress)
}

// DepositERC20 is a paid mutator transaction binding the contract method 0x5a67cb87.
//
// Solidity: function depositERC20(address token, uint256 amount, string custodianIncAddress) returns()
func (_Portalv3 *Portalv3Session) DepositERC20(token common.Address, amount *big.Int, custodianIncAddress string) (*types.Transaction, error) {
	return _Portalv3.Contract.DepositERC20(&_Portalv3.TransactOpts, token, amount, custodianIncAddress)
}

// DepositERC20 is a paid mutator transaction binding the contract method 0x5a67cb87.
//
// Solidity: function depositERC20(address token, uint256 amount, string custodianIncAddress) returns()
func (_Portalv3 *Portalv3TransactorSession) DepositERC20(token common.Address, amount *big.Int, custodianIncAddress string) (*types.Transaction, error) {
	return _Portalv3.Contract.DepositERC20(&_Portalv3.TransactOpts, token, amount, custodianIncAddress)
}

// Extend is a paid mutator transaction binding the contract method 0x9714378c.
//
// Solidity: function extend(uint256 n) returns()
func (_Portalv3 *Portalv3Transactor) Extend(opts *bind.TransactOpts, n *big.Int) (*types.Transaction, error) {
	return _Portalv3.contract.Transact(opts, "extend", n)
}

// Extend is a paid mutator transaction binding the contract method 0x9714378c.
//
// Solidity: function extend(uint256 n) returns()
func (_Portalv3 *Portalv3Session) Extend(n *big.Int) (*types.Transaction, error) {
	return _Portalv3.Contract.Extend(&_Portalv3.TransactOpts, n)
}

// Extend is a paid mutator transaction binding the contract method 0x9714378c.
//
// Solidity: function extend(uint256 n) returns()
func (_Portalv3 *Portalv3TransactorSession) Extend(n *big.Int) (*types.Transaction, error) {
	return _Portalv3.Contract.Extend(&_Portalv3.TransactOpts, n)
}

// Initialize is a paid mutator transaction binding the contract method 0xc4d66de8.
//
// Solidity: function initialize(address incognitoProxyAddress) returns()
func (_Portalv3 *Portalv3Transactor) Initialize(opts *bind.TransactOpts, incognitoProxyAddress common.Address) (*types.Transaction, error) {
	return _Portalv3.contract.Transact(opts, "initialize", incognitoProxyAddress)
}

// Initialize is a paid mutator transaction binding the contract method 0xc4d66de8.
//
// Solidity: function initialize(address incognitoProxyAddress) returns()
func (_Portalv3 *Portalv3Session) Initialize(incognitoProxyAddress common.Address) (*types.Transaction, error) {
	return _Portalv3.Contract.Initialize(&_Portalv3.TransactOpts, incognitoProxyAddress)
}

// Initialize is a paid mutator transaction binding the contract method 0xc4d66de8.
//
// Solidity: function initialize(address incognitoProxyAddress) returns()
func (_Portalv3 *Portalv3TransactorSession) Initialize(incognitoProxyAddress common.Address) (*types.Transaction, error) {
	return _Portalv3.Contract.Initialize(&_Portalv3.TransactOpts, incognitoProxyAddress)
}

// Pause is a paid mutator transaction binding the contract method 0x8456cb59.
//
// Solidity: function pause() returns()
func (_Portalv3 *Portalv3Transactor) Pause(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Portalv3.contract.Transact(opts, "pause")
}

// Pause is a paid mutator transaction binding the contract method 0x8456cb59.
//
// Solidity: function pause() returns()
func (_Portalv3 *Portalv3Session) Pause() (*types.Transaction, error) {
	return _Portalv3.Contract.Pause(&_Portalv3.TransactOpts)
}

// Pause is a paid mutator transaction binding the contract method 0x8456cb59.
//
// Solidity: function pause() returns()
func (_Portalv3 *Portalv3TransactorSession) Pause() (*types.Transaction, error) {
	return _Portalv3.Contract.Pause(&_Portalv3.TransactOpts)
}

// Unpause is a paid mutator transaction binding the contract method 0x3f4ba83a.
//
// Solidity: function unpause() returns()
func (_Portalv3 *Portalv3Transactor) Unpause(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Portalv3.contract.Transact(opts, "unpause")
}

// Unpause is a paid mutator transaction binding the contract method 0x3f4ba83a.
//
// Solidity: function unpause() returns()
func (_Portalv3 *Portalv3Session) Unpause() (*types.Transaction, error) {
	return _Portalv3.Contract.Unpause(&_Portalv3.TransactOpts)
}

// Unpause is a paid mutator transaction binding the contract method 0x3f4ba83a.
//
// Solidity: function unpause() returns()
func (_Portalv3 *Portalv3TransactorSession) Unpause() (*types.Transaction, error) {
	return _Portalv3.Contract.Unpause(&_Portalv3.TransactOpts)
}

// UpdateIncognitoAddress is a paid mutator transaction binding the contract method 0x3a80a7c0.
//
// Solidity: function updateIncognitoAddress(address _incognitoProxy) returns()
func (_Portalv3 *Portalv3Transactor) UpdateIncognitoAddress(opts *bind.TransactOpts, _incognitoProxy common.Address) (*types.Transaction, error) {
	return _Portalv3.contract.Transact(opts, "updateIncognitoAddress", _incognitoProxy)
}

// UpdateIncognitoAddress is a paid mutator transaction binding the contract method 0x3a80a7c0.
//
// Solidity: function updateIncognitoAddress(address _incognitoProxy) returns()
func (_Portalv3 *Portalv3Session) UpdateIncognitoAddress(_incognitoProxy common.Address) (*types.Transaction, error) {
	return _Portalv3.Contract.UpdateIncognitoAddress(&_Portalv3.TransactOpts, _incognitoProxy)
}

// UpdateIncognitoAddress is a paid mutator transaction binding the contract method 0x3a80a7c0.
//
// Solidity: function updateIncognitoAddress(address _incognitoProxy) returns()
func (_Portalv3 *Portalv3TransactorSession) UpdateIncognitoAddress(_incognitoProxy common.Address) (*types.Transaction, error) {
	return _Portalv3.Contract.UpdateIncognitoAddress(&_Portalv3.TransactOpts, _incognitoProxy)
}

// UpdateMetaData is a paid mutator transaction binding the contract method 0xde94b4c8.
//
// Solidity: function updateMetaData(uint8 _meta, bool _value) returns()
func (_Portalv3 *Portalv3Transactor) UpdateMetaData(opts *bind.TransactOpts, _meta uint8, _value bool) (*types.Transaction, error) {
	return _Portalv3.contract.Transact(opts, "updateMetaData", _meta, _value)
}

// UpdateMetaData is a paid mutator transaction binding the contract method 0xde94b4c8.
//
// Solidity: function updateMetaData(uint8 _meta, bool _value) returns()
func (_Portalv3 *Portalv3Session) UpdateMetaData(_meta uint8, _value bool) (*types.Transaction, error) {
	return _Portalv3.Contract.UpdateMetaData(&_Portalv3.TransactOpts, _meta, _value)
}

// UpdateMetaData is a paid mutator transaction binding the contract method 0xde94b4c8.
//
// Solidity: function updateMetaData(uint8 _meta, bool _value) returns()
func (_Portalv3 *Portalv3TransactorSession) UpdateMetaData(_meta uint8, _value bool) (*types.Transaction, error) {
	return _Portalv3.Contract.UpdateMetaData(&_Portalv3.TransactOpts, _meta, _value)
}

// WithdrawLockedTokens is a paid mutator transaction binding the contract method 0x68036268.
//
// Solidity: function withdrawLockedTokens(bytes inst, uint256 heights, bytes32[] instPaths, bool[] instPathIsLefts, bytes32 instRoots, bytes32 blkData, uint256[] sigIdxs, uint8[] sigVs, bytes32[] sigRs, bytes32[] sigSs) returns()
func (_Portalv3 *Portalv3Transactor) WithdrawLockedTokens(opts *bind.TransactOpts, inst []byte, heights *big.Int, instPaths [][32]byte, instPathIsLefts []bool, instRoots [32]byte, blkData [32]byte, sigIdxs []*big.Int, sigVs []uint8, sigRs [][32]byte, sigSs [][32]byte) (*types.Transaction, error) {
	return _Portalv3.contract.Transact(opts, "withdrawLockedTokens", inst, heights, instPaths, instPathIsLefts, instRoots, blkData, sigIdxs, sigVs, sigRs, sigSs)
}

// WithdrawLockedTokens is a paid mutator transaction binding the contract method 0x68036268.
//
// Solidity: function withdrawLockedTokens(bytes inst, uint256 heights, bytes32[] instPaths, bool[] instPathIsLefts, bytes32 instRoots, bytes32 blkData, uint256[] sigIdxs, uint8[] sigVs, bytes32[] sigRs, bytes32[] sigSs) returns()
func (_Portalv3 *Portalv3Session) WithdrawLockedTokens(inst []byte, heights *big.Int, instPaths [][32]byte, instPathIsLefts []bool, instRoots [32]byte, blkData [32]byte, sigIdxs []*big.Int, sigVs []uint8, sigRs [][32]byte, sigSs [][32]byte) (*types.Transaction, error) {
	return _Portalv3.Contract.WithdrawLockedTokens(&_Portalv3.TransactOpts, inst, heights, instPaths, instPathIsLefts, instRoots, blkData, sigIdxs, sigVs, sigRs, sigSs)
}

// WithdrawLockedTokens is a paid mutator transaction binding the contract method 0x68036268.
//
// Solidity: function withdrawLockedTokens(bytes inst, uint256 heights, bytes32[] instPaths, bool[] instPathIsLefts, bytes32 instRoots, bytes32 blkData, uint256[] sigIdxs, uint8[] sigVs, bytes32[] sigRs, bytes32[] sigSs) returns()
func (_Portalv3 *Portalv3TransactorSession) WithdrawLockedTokens(inst []byte, heights *big.Int, instPaths [][32]byte, instPathIsLefts []bool, instRoots [32]byte, blkData [32]byte, sigIdxs []*big.Int, sigVs []uint8, sigRs [][32]byte, sigSs [][32]byte) (*types.Transaction, error) {
	return _Portalv3.Contract.WithdrawLockedTokens(&_Portalv3.TransactOpts, inst, heights, instPaths, instPathIsLefts, instRoots, blkData, sigIdxs, sigVs, sigRs, sigSs)
}

// Portalv3DelegatorIterator is returned from FilterDelegator and is used to iterate over the raw logs and unpacked data for Delegator events raised by the Portalv3 contract.
type Portalv3DelegatorIterator struct {
	Event *Portalv3Delegator // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *Portalv3DelegatorIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(Portalv3Delegator)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(Portalv3Delegator)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *Portalv3DelegatorIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *Portalv3DelegatorIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// Portalv3Delegator represents a Delegator event raised by the Portalv3 contract.
type Portalv3Delegator struct {
	Arg0 common.Address
	Raw  types.Log // Blockchain specific contextual infos
}

// FilterDelegator is a free log retrieval operation binding the contract event 0x1298e11dba685fa982fe8ffe586201d056c16ce3a20c1c6311e07a40ecb88a45.
//
// Solidity: event Delegator(address arg0)
func (_Portalv3 *Portalv3Filterer) FilterDelegator(opts *bind.FilterOpts) (*Portalv3DelegatorIterator, error) {

	logs, sub, err := _Portalv3.contract.FilterLogs(opts, "Delegator")
	if err != nil {
		return nil, err
	}
	return &Portalv3DelegatorIterator{contract: _Portalv3.contract, event: "Delegator", logs: logs, sub: sub}, nil
}

// WatchDelegator is a free log subscription operation binding the contract event 0x1298e11dba685fa982fe8ffe586201d056c16ce3a20c1c6311e07a40ecb88a45.
//
// Solidity: event Delegator(address arg0)
func (_Portalv3 *Portalv3Filterer) WatchDelegator(opts *bind.WatchOpts, sink chan<- *Portalv3Delegator) (event.Subscription, error) {

	logs, sub, err := _Portalv3.contract.WatchLogs(opts, "Delegator")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(Portalv3Delegator)
				if err := _Portalv3.contract.UnpackLog(event, "Delegator", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseDelegator is a log parse operation binding the contract event 0x1298e11dba685fa982fe8ffe586201d056c16ce3a20c1c6311e07a40ecb88a45.
//
// Solidity: event Delegator(address arg0)
func (_Portalv3 *Portalv3Filterer) ParseDelegator(log types.Log) (*Portalv3Delegator, error) {
	event := new(Portalv3Delegator)
	if err := _Portalv3.contract.UnpackLog(event, "Delegator", log); err != nil {
		return nil, err
	}
	return event, nil
}

// Portalv3DepositIterator is returned from FilterDeposit and is used to iterate over the raw logs and unpacked data for Deposit events raised by the Portalv3 contract.
type Portalv3DepositIterator struct {
	Event *Portalv3Deposit // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *Portalv3DepositIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(Portalv3Deposit)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(Portalv3Deposit)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *Portalv3DepositIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *Portalv3DepositIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// Portalv3Deposit represents a Deposit event raised by the Portalv3 contract.
type Portalv3Deposit struct {
	TokenID             common.Address
	CustodianIncAddress string
	Amount              *big.Int
	Raw                 types.Log // Blockchain specific contextual infos
}

// FilterDeposit is a free log retrieval operation binding the contract event 0x2d4b597935f3cd67fb2eebf1db4debc934cee5c7baa7153f980fdbeb2e74084e.
//
// Solidity: event Deposit(address tokenID, string custodianIncAddress, uint256 amount)
func (_Portalv3 *Portalv3Filterer) FilterDeposit(opts *bind.FilterOpts) (*Portalv3DepositIterator, error) {

	logs, sub, err := _Portalv3.contract.FilterLogs(opts, "Deposit")
	if err != nil {
		return nil, err
	}
	return &Portalv3DepositIterator{contract: _Portalv3.contract, event: "Deposit", logs: logs, sub: sub}, nil
}

// WatchDeposit is a free log subscription operation binding the contract event 0x2d4b597935f3cd67fb2eebf1db4debc934cee5c7baa7153f980fdbeb2e74084e.
//
// Solidity: event Deposit(address tokenID, string custodianIncAddress, uint256 amount)
func (_Portalv3 *Portalv3Filterer) WatchDeposit(opts *bind.WatchOpts, sink chan<- *Portalv3Deposit) (event.Subscription, error) {

	logs, sub, err := _Portalv3.contract.WatchLogs(opts, "Deposit")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(Portalv3Deposit)
				if err := _Portalv3.contract.UnpackLog(event, "Deposit", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseDeposit is a log parse operation binding the contract event 0x2d4b597935f3cd67fb2eebf1db4debc934cee5c7baa7153f980fdbeb2e74084e.
//
// Solidity: event Deposit(address tokenID, string custodianIncAddress, uint256 amount)
func (_Portalv3 *Portalv3Filterer) ParseDeposit(log types.Log) (*Portalv3Deposit, error) {
	event := new(Portalv3Deposit)
	if err := _Portalv3.contract.UnpackLog(event, "Deposit", log); err != nil {
		return nil, err
	}
	return event, nil
}

// Portalv3ExtendIterator is returned from FilterExtend and is used to iterate over the raw logs and unpacked data for Extend events raised by the Portalv3 contract.
type Portalv3ExtendIterator struct {
	Event *Portalv3Extend // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *Portalv3ExtendIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(Portalv3Extend)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(Portalv3Extend)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *Portalv3ExtendIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *Portalv3ExtendIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// Portalv3Extend represents a Extend event raised by the Portalv3 contract.
type Portalv3Extend struct {
	Ndays *big.Int
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterExtend is a free log retrieval operation binding the contract event 0x02ef6561d311451dadc920679eb21192a61d96ee8ead94241b8ff073029ca6e8.
//
// Solidity: event Extend(uint256 ndays)
func (_Portalv3 *Portalv3Filterer) FilterExtend(opts *bind.FilterOpts) (*Portalv3ExtendIterator, error) {

	logs, sub, err := _Portalv3.contract.FilterLogs(opts, "Extend")
	if err != nil {
		return nil, err
	}
	return &Portalv3ExtendIterator{contract: _Portalv3.contract, event: "Extend", logs: logs, sub: sub}, nil
}

// WatchExtend is a free log subscription operation binding the contract event 0x02ef6561d311451dadc920679eb21192a61d96ee8ead94241b8ff073029ca6e8.
//
// Solidity: event Extend(uint256 ndays)
func (_Portalv3 *Portalv3Filterer) WatchExtend(opts *bind.WatchOpts, sink chan<- *Portalv3Extend) (event.Subscription, error) {

	logs, sub, err := _Portalv3.contract.WatchLogs(opts, "Extend")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(Portalv3Extend)
				if err := _Portalv3.contract.UnpackLog(event, "Extend", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseExtend is a log parse operation binding the contract event 0x02ef6561d311451dadc920679eb21192a61d96ee8ead94241b8ff073029ca6e8.
//
// Solidity: event Extend(uint256 ndays)
func (_Portalv3 *Portalv3Filterer) ParseExtend(log types.Log) (*Portalv3Extend, error) {
	event := new(Portalv3Extend)
	if err := _Portalv3.contract.UnpackLog(event, "Extend", log); err != nil {
		return nil, err
	}
	return event, nil
}

// Portalv3IncognitoProxyIterator is returned from FilterIncognitoProxy and is used to iterate over the raw logs and unpacked data for IncognitoProxy events raised by the Portalv3 contract.
type Portalv3IncognitoProxyIterator struct {
	Event *Portalv3IncognitoProxy // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *Portalv3IncognitoProxyIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(Portalv3IncognitoProxy)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(Portalv3IncognitoProxy)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *Portalv3IncognitoProxyIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *Portalv3IncognitoProxyIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// Portalv3IncognitoProxy represents a IncognitoProxy event raised by the Portalv3 contract.
type Portalv3IncognitoProxy struct {
	Arg0 common.Address
	Raw  types.Log // Blockchain specific contextual infos
}

// FilterIncognitoProxy is a free log retrieval operation binding the contract event 0xf1e7743097e8400a8a63850dc1d480ad78a7125a8e57a671783a92e340af959f.
//
// Solidity: event IncognitoProxy(address arg0)
func (_Portalv3 *Portalv3Filterer) FilterIncognitoProxy(opts *bind.FilterOpts) (*Portalv3IncognitoProxyIterator, error) {

	logs, sub, err := _Portalv3.contract.FilterLogs(opts, "IncognitoProxy")
	if err != nil {
		return nil, err
	}
	return &Portalv3IncognitoProxyIterator{contract: _Portalv3.contract, event: "IncognitoProxy", logs: logs, sub: sub}, nil
}

// WatchIncognitoProxy is a free log subscription operation binding the contract event 0xf1e7743097e8400a8a63850dc1d480ad78a7125a8e57a671783a92e340af959f.
//
// Solidity: event IncognitoProxy(address arg0)
func (_Portalv3 *Portalv3Filterer) WatchIncognitoProxy(opts *bind.WatchOpts, sink chan<- *Portalv3IncognitoProxy) (event.Subscription, error) {

	logs, sub, err := _Portalv3.contract.WatchLogs(opts, "IncognitoProxy")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(Portalv3IncognitoProxy)
				if err := _Portalv3.contract.UnpackLog(event, "IncognitoProxy", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseIncognitoProxy is a log parse operation binding the contract event 0xf1e7743097e8400a8a63850dc1d480ad78a7125a8e57a671783a92e340af959f.
//
// Solidity: event IncognitoProxy(address arg0)
func (_Portalv3 *Portalv3Filterer) ParseIncognitoProxy(log types.Log) (*Portalv3IncognitoProxy, error) {
	event := new(Portalv3IncognitoProxy)
	if err := _Portalv3.contract.UnpackLog(event, "IncognitoProxy", log); err != nil {
		return nil, err
	}
	return event, nil
}

// Portalv3MetaDataIterator is returned from FilterMetaData and is used to iterate over the raw logs and unpacked data for MetaData events raised by the Portalv3 contract.
type Portalv3MetaDataIterator struct {
	Event *Portalv3MetaData // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *Portalv3MetaDataIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(Portalv3MetaData)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(Portalv3MetaData)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *Portalv3MetaDataIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *Portalv3MetaDataIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// Portalv3MetaData represents a MetaData event raised by the Portalv3 contract.
type Portalv3MetaData struct {
	Arg0 uint8
	Arg1 bool
	Raw  types.Log // Blockchain specific contextual infos
}

// FilterMetaData is a free log retrieval operation binding the contract event 0xd7a3145b1f09160ed2cd7faebbc906ee028ee236f0d6564691b17dd738604c17.
//
// Solidity: event MetaData(uint8 arg0, bool arg1)
func (_Portalv3 *Portalv3Filterer) FilterMetaData(opts *bind.FilterOpts) (*Portalv3MetaDataIterator, error) {

	logs, sub, err := _Portalv3.contract.FilterLogs(opts, "MetaData")
	if err != nil {
		return nil, err
	}
	return &Portalv3MetaDataIterator{contract: _Portalv3.contract, event: "MetaData", logs: logs, sub: sub}, nil
}

// WatchMetaData is a free log subscription operation binding the contract event 0xd7a3145b1f09160ed2cd7faebbc906ee028ee236f0d6564691b17dd738604c17.
//
// Solidity: event MetaData(uint8 arg0, bool arg1)
func (_Portalv3 *Portalv3Filterer) WatchMetaData(opts *bind.WatchOpts, sink chan<- *Portalv3MetaData) (event.Subscription, error) {

	logs, sub, err := _Portalv3.contract.WatchLogs(opts, "MetaData")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(Portalv3MetaData)
				if err := _Portalv3.contract.UnpackLog(event, "MetaData", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseMetaData is a log parse operation binding the contract event 0xd7a3145b1f09160ed2cd7faebbc906ee028ee236f0d6564691b17dd738604c17.
//
// Solidity: event MetaData(uint8 arg0, bool arg1)
func (_Portalv3 *Portalv3Filterer) ParseMetaData(log types.Log) (*Portalv3MetaData, error) {
	event := new(Portalv3MetaData)
	if err := _Portalv3.contract.UnpackLog(event, "MetaData", log); err != nil {
		return nil, err
	}
	return event, nil
}

// Portalv3PausedIterator is returned from FilterPaused and is used to iterate over the raw logs and unpacked data for Paused events raised by the Portalv3 contract.
type Portalv3PausedIterator struct {
	Event *Portalv3Paused // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *Portalv3PausedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(Portalv3Paused)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(Portalv3Paused)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *Portalv3PausedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *Portalv3PausedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// Portalv3Paused represents a Paused event raised by the Portalv3 contract.
type Portalv3Paused struct {
	Pauser common.Address
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterPaused is a free log retrieval operation binding the contract event 0x62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258.
//
// Solidity: event Paused(address pauser)
func (_Portalv3 *Portalv3Filterer) FilterPaused(opts *bind.FilterOpts) (*Portalv3PausedIterator, error) {

	logs, sub, err := _Portalv3.contract.FilterLogs(opts, "Paused")
	if err != nil {
		return nil, err
	}
	return &Portalv3PausedIterator{contract: _Portalv3.contract, event: "Paused", logs: logs, sub: sub}, nil
}

// WatchPaused is a free log subscription operation binding the contract event 0x62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258.
//
// Solidity: event Paused(address pauser)
func (_Portalv3 *Portalv3Filterer) WatchPaused(opts *bind.WatchOpts, sink chan<- *Portalv3Paused) (event.Subscription, error) {

	logs, sub, err := _Portalv3.contract.WatchLogs(opts, "Paused")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(Portalv3Paused)
				if err := _Portalv3.contract.UnpackLog(event, "Paused", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParsePaused is a log parse operation binding the contract event 0x62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258.
//
// Solidity: event Paused(address pauser)
func (_Portalv3 *Portalv3Filterer) ParsePaused(log types.Log) (*Portalv3Paused, error) {
	event := new(Portalv3Paused)
	if err := _Portalv3.contract.UnpackLog(event, "Paused", log); err != nil {
		return nil, err
	}
	return event, nil
}

// Portalv3UnpausedIterator is returned from FilterUnpaused and is used to iterate over the raw logs and unpacked data for Unpaused events raised by the Portalv3 contract.
type Portalv3UnpausedIterator struct {
	Event *Portalv3Unpaused // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *Portalv3UnpausedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(Portalv3Unpaused)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(Portalv3Unpaused)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *Portalv3UnpausedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *Portalv3UnpausedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// Portalv3Unpaused represents a Unpaused event raised by the Portalv3 contract.
type Portalv3Unpaused struct {
	Pauser common.Address
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterUnpaused is a free log retrieval operation binding the contract event 0x5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa.
//
// Solidity: event Unpaused(address pauser)
func (_Portalv3 *Portalv3Filterer) FilterUnpaused(opts *bind.FilterOpts) (*Portalv3UnpausedIterator, error) {

	logs, sub, err := _Portalv3.contract.FilterLogs(opts, "Unpaused")
	if err != nil {
		return nil, err
	}
	return &Portalv3UnpausedIterator{contract: _Portalv3.contract, event: "Unpaused", logs: logs, sub: sub}, nil
}

// WatchUnpaused is a free log subscription operation binding the contract event 0x5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa.
//
// Solidity: event Unpaused(address pauser)
func (_Portalv3 *Portalv3Filterer) WatchUnpaused(opts *bind.WatchOpts, sink chan<- *Portalv3Unpaused) (event.Subscription, error) {

	logs, sub, err := _Portalv3.contract.WatchLogs(opts, "Unpaused")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(Portalv3Unpaused)
				if err := _Portalv3.contract.UnpackLog(event, "Unpaused", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUnpaused is a log parse operation binding the contract event 0x5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa.
//
// Solidity: event Unpaused(address pauser)
func (_Portalv3 *Portalv3Filterer) ParseUnpaused(log types.Log) (*Portalv3Unpaused, error) {
	event := new(Portalv3Unpaused)
	if err := _Portalv3.contract.UnpackLog(event, "Unpaused", log); err != nil {
		return nil, err
	}
	return event, nil
}

// Portalv3WithdrawIterator is returned from FilterWithdraw and is used to iterate over the raw logs and unpacked data for Withdraw events raised by the Portalv3 contract.
type Portalv3WithdrawIterator struct {
	Event *Portalv3Withdraw // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *Portalv3WithdrawIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(Portalv3Withdraw)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(Portalv3Withdraw)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *Portalv3WithdrawIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *Portalv3WithdrawIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// Portalv3Withdraw represents a Withdraw event raised by the Portalv3 contract.
type Portalv3Withdraw struct {
	Token  []common.Address
	To     common.Address
	Amount []*big.Int
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterWithdraw is a free log retrieval operation binding the contract event 0x8437483ccb01a763b6d83300297a37a38b17c805730605c1df6c676bf4c1a20b.
//
// Solidity: event Withdraw(address[] token, address to, uint256[] amount)
func (_Portalv3 *Portalv3Filterer) FilterWithdraw(opts *bind.FilterOpts) (*Portalv3WithdrawIterator, error) {

	logs, sub, err := _Portalv3.contract.FilterLogs(opts, "Withdraw")
	if err != nil {
		return nil, err
	}
	return &Portalv3WithdrawIterator{contract: _Portalv3.contract, event: "Withdraw", logs: logs, sub: sub}, nil
}

// WatchWithdraw is a free log subscription operation binding the contract event 0x8437483ccb01a763b6d83300297a37a38b17c805730605c1df6c676bf4c1a20b.
//
// Solidity: event Withdraw(address[] token, address to, uint256[] amount)
func (_Portalv3 *Portalv3Filterer) WatchWithdraw(opts *bind.WatchOpts, sink chan<- *Portalv3Withdraw) (event.Subscription, error) {

	logs, sub, err := _Portalv3.contract.WatchLogs(opts, "Withdraw")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(Portalv3Withdraw)
				if err := _Portalv3.contract.UnpackLog(event, "Withdraw", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseWithdraw is a log parse operation binding the contract event 0x8437483ccb01a763b6d83300297a37a38b17c805730605c1df6c676bf4c1a20b.
//
// Solidity: event Withdraw(address[] token, address to, uint256[] amount)
func (_Portalv3 *Portalv3Filterer) ParseWithdraw(log types.Log) (*Portalv3Withdraw, error) {
	event := new(Portalv3Withdraw)
	if err := _Portalv3.contract.UnpackLog(event, "Withdraw", log); err != nil {
		return nil, err
	}
	return event, nil
}
